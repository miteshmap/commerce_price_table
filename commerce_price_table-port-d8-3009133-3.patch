diff --git a/README.txt b/README.txt
index eb42442..026182e 100644
--- a/README.txt
+++ b/README.txt
@@ -11,8 +11,6 @@ Install and configure
      unlimited or a fixed set of values.
   3. Add/edit your products and add them as many prices as you want and the
      quantity ranges. Use -1 for "Unlimited".
-  4. You can hide the original price checking the setting "Hide default price"
-     in the field settings.
 
 Recommended: Enable the quantity field for the add to cart display formatter in
 the product display settings.
\ No newline at end of file
diff --git a/commerce_price_table.info b/commerce_price_table.info
deleted file mode 100644
index c70d678..0000000
--- a/commerce_price_table.info
+++ /dev/null
@@ -1,10 +0,0 @@
-name = Commerce price table
-description = Price table field for Commerce
-package = Commerce (contrib)
-core = 7.x
-
-dependencies[] = commerce_product
-dependencies[] = commerce_price
-
-; Simple tests
-files[] = tests/commerce_price_table.test
\ No newline at end of file
diff --git a/commerce_price_table.install b/commerce_price_table.install
deleted file mode 100644
index ef74f43..0000000
--- a/commerce_price_table.install
+++ /dev/null
@@ -1,47 +0,0 @@
-<?php
-
-/**
- * Implements hook_field_schema().
- */
-function commerce_price_table_field_schema($field) {
-  if ($field['type'] == 'commerce_price_table') {
-    return array(
-      'columns' => array(
-        'amount' => array(
-          'description' => 'The price amount.',
-          'type' => 'int',
-          'not null' => TRUE,
-          'default' => 0,
-        ),
-        'currency_code' => array(
-          'description' => 'The currency code for the price.',
-          'type' => 'varchar',
-          'length' => 32,
-          'not null' => TRUE,
-        ),
-        'min_qty' => array(
-          'description' => 'The minimal quantity for this amount.',
-          'type' => 'int',
-          'not null' => TRUE,
-          'default' => 0,
-        ),
-        'max_qty' => array(
-          'description' => 'The maximum quantity for this amount.',
-          'type' => 'int',
-          'not null' => TRUE,
-          'default' => 0,
-        ),
-        'data' => array(
-          'description' => 'A serialized array of additional price data.',
-          'type' => 'text',
-          'size' => 'big',
-          'not null' => FALSE,
-          'serialize' => TRUE,
-        ),
-      ),
-      'indexes' => array(
-        'currency_price_table' => array('amount', 'currency_code'),
-      ),
-    );
-  }
-}
diff --git a/commerce_price_table.module b/commerce_price_table.module
index 7630f27..2986280 100644
--- a/commerce_price_table.module
+++ b/commerce_price_table.module
@@ -1,595 +1,22 @@
 <?php
-
 /**
  * @file
+ * Contains commerce_price_table.module
  */
 
-define('COMMERCE_PRICE_TABLE_HORIZONTAL', 0);
-define('COMMERCE_PRICE_TABLE_VERTICAL', 1);
-
-/**
- * Implements hook_field_info().
- */
-function commerce_price_table_field_info() {
-  return array(
-    'commerce_price_table' => array(
-      'label' => t('Price table'),
-      'description' => t('This field stores multiple prices for products based on the quantity selected.'),
-      'settings' => array(),
-      'instance_settings' => array(),
-      'default_widget' => 'commerce_price_table_multiple',
-      'default_formatter' => 'commerce_multiprice_default',
-      'property_type' => 'commerce_price_table',
-      'property_callbacks' => array('commerce_price_table_property_info_callback'),
-    ),
-  );
-}
-
-/**
- * Implements hook_field_widget_info().
- */
-function commerce_price_table_field_widget_info() {
-  return array(
-    'commerce_price_table_multiple' => array(
-      'label' => t('Price table'),
-      'field types' => array('commerce_price_table'),
-      'settings' => array(
-        'currency_code' => 'default',
-      ),
-    ),
-  );
-}
-
-/**
- * Implements hook_field_formatter_info().
- */
-function commerce_price_table_field_formatter_info() {
-  return array(
-    'commerce_multiprice_default' => array(
-      'label' => t('Price chart'),
-      'field types' => array('commerce_price_table'),
-      'settings' => array(
-        'calculation' => FALSE,
-        'price_label' => t('Price'),
-        'quantity_label' => t('Quantity'),
-        'table_orientation' => t('Orientation'),
-      ),
-    ),
-  );
-}
-
-/**
- * Implements hook_field_widget_form().
- */
-function commerce_price_table_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
-  // Use the default currency if the setting is not present.
-  if (empty($instance['widget']['settings']['currency_code']) || $instance['widget']['settings']['currency_code'] == 'default') {
-    $default_currency_code = NULL;
-  }
-  else {
-    $default_currency_code = $instance['widget']['settings']['currency_code'];
-  }
-
-  // If a price has already been set for this instance prepare default values.
-  if (isset($items[$delta]['amount'])) {
-    $currency = commerce_currency_load($items[$delta]['currency_code']);
-
-    // Round the default value.
-    $default_amount = commerce_currency_amount_to_decimal($items[$delta]['amount'], $currency['code']);
-
-    // Run it through number_format() to add the decimal places in if necessary.
-    if (strpos($default_amount, '.') === FALSE || strpos($default_amount, '.') > strlen($default_amount) - $currency['decimals']) {
-      $default_amount = number_format($default_amount, $currency['decimals'], '.', '');
-    }
-
-    $default_currency_code = $items[$delta]['currency_code'];
-  }
-  else {
-    $default_amount = NULL;
-  }
-
-  // Load the default currency for this instance.
-  $default_currency = commerce_currency_load($default_currency_code);
-
-  $element['#attached']['css'][] = drupal_get_path('module', 'commerce_price_table') . '/theme/commerce_price_table.css';
-
-  if ($instance['widget']['type'] == 'commerce_price_table_multiple') {
-    $element['amount'] = array(
-      '#type' => 'textfield',
-      '#title' => t('Price'),
-      '#default_value' => $default_amount,
-      '#size' => 10,
-      '#field_suffix' => $default_currency['code'],
-    );
-    $element['currency_code'] = array(
-      '#type' => 'value',
-      '#default_value' => $default_currency['code'],
-    );
-    $element['min_qty'] = array(
-      '#type' => 'textfield',
-      '#title' => t('Minimum quantity'),
-      '#default_value' => isset($items[$delta]['min_qty']) ? $items[$delta]['min_qty'] : 0,
-      '#size' => 10,
-    );
-    $element['max_qty'] = array(
-      '#type' => 'textfield',
-      '#title' => t('Maximum quantity'),
-      '#description' => t('Use -1 for no upper limit.'),
-      '#default_value' => isset($items[$delta]['max_qty']) ? $items[$delta]['max_qty'] : 0,
-      '#size' => 10,
-    );
-  }
-
-  $element['data'] = array(
-    '#type' => 'value',
-    '#default_value' => !empty($items[$delta]['data']) ? $items[$delta]['data'] : array('components' => array()),
-  );
-
-  $element['#element_validate'][] = 'commerce_price_table_field_widget_validate';
-
-  return $element;
-}
+use Drupal\Core\Routing\RouteMatchInterface;
 
 /**
- * Validate callback: ensures the amount value is numeric and converts it from a
- * decimal value to an integer price amount.
+ * Implements hook_help().
  */
-function commerce_price_table_field_widget_validate($element, &$form_state) {
-  if ($element['amount']['#value'] !== '') {
-    // Ensure the price is numeric.
-    if (!is_numeric($element['amount']['#value'])) {
-      form_error($element['amount'], t('%title: you must enter a numeric value for the price amount.', array('%title' => $element['amount']['#title'])));
-    }
-    else {
-      // Convert the decimal amount value entered to an integer based amount value.
-      form_set_value($element['amount'], commerce_currency_decimal_to_amount($element['amount']['#value'], $element['currency_code']['#value']), $form_state);
-    }
-  }
-}
+function commerce_price_table_help($route_name, RouteMatchInterface $route_match) {
+  switch ($route_name) {
+    case 'help.page.commerce_price_table':
+      $output = '';
+      $output .= '<h3>' . t('About') . '</h3>';
+      $output .= '<p>' . t('This is a contributed module for Drupal Commerce that allows you to use a secondary price field to supply an alternate price for a product based on the quantity of that product on the line item. ') . '</p>';
+      $output .= '<p>' . t('It also provides a field formatter to display the price/quantity values as a table. ') . '</p>';
 
-/**
- * Implements hook_field_presave().
- */
-function commerce_price_table_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
-  // Convert amounts to integers and serialize data arrays before saving.
-  foreach ($items as $delta => $item) {
-    // Serialize an existing data array.
-    if (isset($item['data']) && is_array($item['data'])) {
-      $items[$delta]['data'] = serialize($item['data']);
-    }
-
-    if (empty($item['min_qty'])) {
-      $items[$delta]['min_qty'] = 0;
-    }
-    if (empty($item['max_qty'])) {
-      $items[$delta]['max_qty'] = 0;
-    }
-  }
-}
-
-/**
- * Implements hook_field_load().
- */
-function commerce_price_table_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
-  // Convert amounts to their floating point values and deserialize data arrays.
-  foreach ($entities as $id => $entity) {
-    foreach ($items[$id] as $delta => $item) {
-      // Unserialize the data array if necessary.
-      if (!empty($items[$id][$delta]['data'])) {
-        if (is_string($items[$id][$delta]['data'])) {
-          $items[$id][$delta]['data'] = unserialize($items[$id][$delta]['data']);
-        }
-      }
-      else {
-        $items[$id][$delta]['data'] = array('components' => array());
-      }
-    }
-  }
-}
-
-/**
- * Implements hook_field_validate().
- */
-function commerce_price_table_field_validate($entity_type, $entity, $field, $instance, $langcode, &$items, &$errors) {
-  // Ensure only numeric values are entered in price fields.
-  foreach ($items as $delta => $item) {
-    // If the current item's price is not set, skip validating its row.
-    if (!isset($item['amount']) || $item['amount'] == '') {
-      continue;
-    }
-
-    if (!empty($item['amount']) && !is_numeric($item['amount'])) {
-      $errors[$field['field_name']][$langcode][$delta][] = array(
-        'error' => 'price_numeric',
-        'message' => t('%name: you must enter a numeric value for the price.', array('%name' => $instance['label'])),
-      );
-    }
-
-    // Ensure the quantity fields are valid values.
-    if (!isset($item['min_qty']) || $item['min_qty'] == '' || !ctype_digit($item['min_qty']) || $item['min_qty'] < 1) {
-      $errors[$field['field_name']][$langcode][$delta][] = array(
-        'error' => 'price_table_min_qty',
-        'message' => t('%name: Minimum quantity values must be integers greater than 0.', array('%name' => $instance['label'])),
-      );
-    }
-
-    if (!isset($item['max_qty']) || $item['max_qty'] == '' || (!ctype_digit($item['max_qty']) && $item['max_qty'] <> -1) || $item['max_qty'] < -1 || $item['max_qty'] == 0) {
-      $errors[$field['field_name']][$langcode][$delta][] = array(
-        'error' => 'price_table_max_qty',
-        'message' => t('%name: Maximum quantity values must be integers greater than 0 or -1 for unlimited.', array('%name' => $instance['label'])),
-      );
-    }
-
-    if ($item['max_qty'] < $item['min_qty'] && $item['max_qty'] <> -1) {
-      $errors[$field['field_name']][$langcode][$delta][] = array(
-        'error' => 'price_table_max_qty',
-        'message' => t('%name: Maximum quantity values must be higher than their related minimum quantity values.', array('%name' => $instance['label'])),
-      );
-    }
-
-    // @TODO Add extra validations, as no repeating qty and always force to have quantity for 1?.
-  }
-}
-
-/**
- * Implements hook_field_widget_error().
- */
-function commerce_price_table_field_widget_error($element, $error, $form, &$form_state) {
-  switch ($error['error']) {
-    case 'price_numeric':
-      form_error($element['amount'], $error['message']);
-      break;
-    case 'price_table_min_qty':
-      form_error($element['min_qty'], $error['message']);
-      break;
-    case 'price_table_max_qty':
-      form_error($element['max_qty'], $error['message']);
-      break;
-  }
-}
-
-/**
- * Implementation of hook_field_is_empty().
- */
-function commerce_price_table_field_is_empty($item, $field) {
-  return !isset($item['amount']) || (string) $item['amount'] == '';
-}
-
-/**
- * Callback to alter the property info of price fields.
- *
- * @see commerce_price_field_info().
- */
-function commerce_price_table_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
-  $name = $field['field_name'];
-  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];
-
-  $property['type'] = ($field['cardinality'] != 1) ? 'list<commerce_price_table>' : 'commerce_price_table';
-  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
-  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
-  $property['auto creation'] = 'commerce_price_field_data_auto_creation';
-  $property['property info'] = commerce_price_table_field_data_property_info();
-
-  unset($property['query callback']);
-}
-
-/**
- * Implements hook_field_instance_settings_form().
- */
-function commerce_price_table_field_instance_settings_form($field, $instance) {
-  $settings = $instance['settings'];
-  $form['commerce_price_table'] = array(
-    '#type' => 'fieldset',
-    '#title' => t('Commerce price table settings'),
-  );
-  $form['commerce_price_table']['hide_default_price'] = array(
-    '#type' => 'checkbox',
-    '#title' => t('Hide default price'),
-    '#description' => t('Activate this checkbox to hide the default price and display the price table instead.'),
-    '#default_value' => isset($settings['commerce_price_table']['hide_default_price']) ? $settings['commerce_price_table']['hide_default_price'] : NULL,
-  );
-  return $form;
-}
-
-/**
- * Implements hook_field_formatter_settings_form().
- */
-function commerce_price_table_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
-  $display = $instance['display'][$view_mode];
-  $settings = $display['settings'];
-
-  $element = array();
-
-  if ($display['type'] == 'commerce_multiprice_default') {
-    $element['price_label'] = array(
-      '#type' => 'textfield',
-      '#title' => t('Price label for the price table'),
-      '#default_value' => isset($settings['price_label']) ? $settings['price_label'] : t('Price'),
-    );
-    $element['quantity_label'] = array(
-      '#type' => 'textfield',
-      '#title' => t('Quantity label for the price table'),
-      '#default_value' => isset($settings['quantity_label']) ? $settings['quantity_label'] : t('Quantity'),
-    );
-    $element['table_orientation'] = array(
-      '#type' => 'radios',
-      '#options' => array(
-        COMMERCE_PRICE_TABLE_HORIZONTAL => t('Horizontal'),
-        COMMERCE_PRICE_TABLE_VERTICAL => t('Vertical'),
-      ),
-      '#title' => t('Orientation of the price table'),
-      '#default_value' => isset($settings['table_orientation']) ? $settings['table_orientation'] : COMMERCE_PRICE_TABLE_HORIZONTAL,
-    );
-  }
-
-  return $element;
-}
-
-/**
- * Implements hook_field_formatter_settings_summary().
- */
-function commerce_price_table_field_formatter_settings_summary($field, $instance, $view_mode) {
-  $display = $instance['display'][$view_mode];
-  $settings = $display['settings'];
-
-  $summary = array();
-
-  if ($display['type'] == 'commerce_multiprice_default') {
-    $orientation = isset($settings['table_orientation']) && $settings['table_orientation'] == COMMERCE_PRICE_TABLE_VERTICAL ? t('Vertical') : t('Horizontal');
-    $summary = array(
-      t('Quantity label: !quantity_label', array('!quantity_label' => isset($settings['quantity_label']) ? $settings['quantity_label'] : t('Quantity'))),
-      t('Price label: !price_label', array('!price_label' => isset($settings['price_label']) ? $settings['price_label'] : t('Price'))),
-      t('Orientation: !orientation', array('!orientation' => $orientation)),
-    );
-  }
-
-  return implode('<br />', $summary);
-}
-
-/**
- * Defines info for the properties of the Price field data structure.
- */
-function commerce_price_table_field_data_property_info($name = NULL) {
-  return array(
-    'amount' => array(
-      'label' => t('Amount'),
-      'description' => !empty($name) ? t('Amount value of field %name', array('%name' => $name)) : '',
-      'type' => 'decimal',
-      'getter callback' => 'entity_property_verbatim_get',
-      'setter callback' => 'entity_property_verbatim_set',
-    ),
-    'currency_code' => array(
-      'label' => t('Currency'),
-      'description' => !empty($name) ? t('Currency code of field %name', array('%name' => $name)) : '',
-      'type' => 'text',
-      'getter callback' => 'entity_property_verbatim_get',
-      'setter callback' => 'entity_property_verbatim_set',
-      'options list' => 'commerce_currency_code_options_list',
-    ),
-    'min_qty' => array(
-      'label' => t('Min Qty'),
-      'description' => !empty($name) ? t('Min quantity value of field %name', array('%name' => $name)) : '',
-      'type' => 'integer',
-      'getter callback' => 'entity_property_verbatim_get',
-      'setter callback' => 'entity_property_verbatim_set',
-    ),
-    'max_qty' => array(
-      'label' => t('Max Qty'),
-      'description' => !empty($name) ? t('Max quantity value of field %name', array('%name' => $name)) : '',
-      'type' => 'integer',
-      'getter callback' => 'entity_property_verbatim_get',
-      'setter callback' => 'entity_property_verbatim_set',
-    ),
-    'data' => array(
-      'label' => t('Data'),
-      'description' => !empty($name) ? t('Data array of field %name', array('%name' => $name)) : '',
-      'type' => 'struct',
-      'getter callback' => 'entity_property_verbatim_get',
-      'setter callback' => 'entity_property_verbatim_set',
-    ),
-  );
-}
-
-/**
- * Implements hook_theme().
- */
-function commerce_price_table_theme() {
-  return array(
-    'commerce_multiprice_default' => array(
-      'variables' => array('items' => array()),
-    ),
-  );
-}
-
-/**
- * Implements hook_field_formatter_view().
- */
-function commerce_price_table_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
-  $element = array();
-
-  if ($display['type'] == 'commerce_multiprice_default' && !empty($items)) {
-    $header = array(isset($display['settings']['quantity_label']) ? $display['settings']['quantity_label'] : t('Quantity'));
-    $row = array(isset($display['settings']['price_label']) ? $display['settings']['price_label'] : t('Price'));
-    if ($entity_type == 'commerce_product') {
-      foreach ($items as $delta => $item) {
-        if (isset($item['min_qty']) && $item['max_qty'] && $item['amount']) {
-          $header[] = commerce_price_table_display_quantity_headers($item);
-
-          $line_item = commerce_product_line_item_new($entity, $item['min_qty']);
-          $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
-          $line_item_wrapper->commerce_unit_price->amount = $item['amount'];
-
-          // Empty the price components to recalculate them.
-          $line_item->commerce_unit_price[LANGUAGE_NONE][0]['data']['components'] = array();
-          $price = array(
-            'amount' => $item['amount'],
-            'currency_code' => $item['currency_code'],
-            'data' => array(),
-          );
-
-          // Alter the base price to the current one.
-          $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
-                  $line_item_wrapper->commerce_unit_price->value(),
-                  'base_price',
-                  $price,
-                  TRUE
-          );
-
-          // Invoke the calculation rule event.
-          rules_invoke_event('commerce_product_calculate_sell_price', $line_item);
-
-          $row[] = array('data' => commerce_currency_format($line_item_wrapper->commerce_unit_price->amount->value(), $line_item_wrapper->commerce_unit_price->currency_code->value(), $entity));
-        }
-      }
-    }
-    else {
-      // Not a product. We're dealing with exotic stuff here.
-      foreach ($items as $delta => $item) {
-        if (isset($item['min_qty']) && $item['max_qty'] && $item['amount']) {
-          $header[] = commerce_price_table_display_quantity_headers($item);
-          $row[] = array('data' => commerce_currency_format($item['amount'], $item['currency_code'], $entity));
-        }
-      }
-    }
-
-    // By default, the price table is rendered horizontally. If vertical
-    // orientation was choosen, flip the table.
-    if (isset($display['settings']['table_orientation']) && $display['settings']['table_orientation'] == COMMERCE_PRICE_TABLE_VERTICAL) {
-      $rows = array();
-      $header_old = $header;
-
-      $header = array($header_old[0], $row[0]);
-      for ($index = 1; $index < count($row); $index++) {
-        $rows[] = array('data' => array($header_old[$index], $row[$index]['data']));
-      }
-    }
-    else {
-      $rows = array($row);
-    }
-
-    $element[] = array(
-      '#markup' => theme('table', array('header' => $header, 'rows' => $rows)),
-    );
-  }
-
-  return $element;
-}
-
-/**
- * Get the price for the min qty possible in a product.
- */
-function commerce_price_table_get_amount_qty($product, $quantity = 1, $items = array()) {
-  if (empty($items)) {
-    // Support legacy versions where rules doesn't send $items over.
-    // Look up all price table items in the current product.
-    $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
-    $fields = commerce_info_fields('commerce_price_table', 'commerce_product');
-    foreach ($fields as $field) {
-      if (!empty($product->{$field['field_name']})) {
-        foreach ($product_wrapper->{$field['field_name']}->value() as $item) {
-          $items[] = $item;
-        }
-      }
-    }
-  }
-
-  // Sort the items by quantity and return the matching one.
-  uasort($items, 'commerce_price_table_sort_by_qty');
-  foreach ($items as $item) {
-    if ($quantity <= $item['max_qty'] && $quantity >= $item['min_qty']) {
-      return $item;
-    }
-  }
-
-  // Handle the unlimited qty.
-  foreach ($items as $item) {
-    if ($item['max_qty'] == -1) {
-      return $item;
-    }
-  }
-
-  // We fallback to the higher one if no match was found.
-  return end($items);
-}
-
-/**
- * Sort the price fields by quantity.
- */
-function commerce_price_table_sort_by_qty($a, $b) {
-  $a_qty = (is_array($a) && isset($a['min_qty'])) ? $a['min_qty'] : 0;
-  $b_qty = (is_array($b) && isset($b['min_qty'])) ? $b['min_qty'] : 0;
-  if ($a_qty == $b_qty) {
-    return 0;
-  }
-  return ($a_qty < $b_qty) ? -1 : 1;
-}
-
-/**
- * Return the settings of all the price table field of a bundle.
- */
-function commerce_price_table_get_field_instance_settings($entity_type = 'commerce_product', $bundle = 'product') {
-  $settings = array();
-  $fields = commerce_info_fields('commerce_price_table', $entity_type);
-  if (isset($fields) && is_array($fields)) {
-    foreach ($fields as $field) {
-      $settings[] = field_info_instance($entity_type, $field['field_name'], $bundle);
-    }
-  }
-
-  return $settings;
-}
-
-/**
- * Implements hook_form_FORM_ID_alter().
- */
-function commerce_price_table_form_commerce_product_ui_product_form_alter(&$form, &$form_state, $form_id) {
-  foreach (commerce_price_table_get_field_instance_settings($form['#entity_type'], $form['#bundle']) as $setting) {
-    if (isset($setting['settings']['commerce_price_table']['hide_default_price']) && $setting['settings']['commerce_price_table']['hide_default_price'] == TRUE) {
-      $form['commerce_price']['#access'] = FALSE;
-      break;
-    }
-  }
-}
-
-/**
- * Implements hook_entity_view_alter().
- */
-function commerce_price_table_entity_view_alter(&$build, $type) {
-  // Check if there is a product reference field in the node.
-  $found_product_reference = FALSE;
-  $fields = commerce_info_fields('commerce_product_reference', $type);
-  foreach ($fields as $field) {
-    if (isset($build[$field['field_name']])) {
-      $found_product_reference = TRUE;
-    }
-  }
-
-  // If there is one, we check if the setting for hiding the default price is
-  // enabled.
-  if ($found_product_reference || !empty($build['product:commerce_price'])) {
-    $access = TRUE;
-    foreach (commerce_price_table_get_field_instance_settings($type, $build['#bundle']) as $setting) {
-      if (isset($setting['settings']['commerce_price_table']['hide_default_price']) && $setting['settings']['commerce_price_table']['hide_default_price'] == TRUE) {
-        $access = FALSE;
-      }
-    }
-    $build['product:commerce_price']['#access'] = $access;
-  }
-}
-
-/**
- * Helper function that takes care of the quantity displayed in the headers of
- * the price table.
- */
-function commerce_price_table_display_quantity_headers($item) {
-  // Set the quantity text to unlimited if it's -1.
-  $max_qty = $item['max_qty'] == -1 ? t('Unlimited') : $item['max_qty'];
-  // If max and min qtys are the same, only show one.
-  if ($item['min_qty'] == $max_qty) {
-    $quantity_text = $item['min_qty'];
-  }
-  else {
-    $quantity_text = $item['min_qty'] . ' - ' . $max_qty;
+      return $output;
   }
-  return $quantity_text;
 }
diff --git a/commerce_price_table.rules.inc b/commerce_price_table.rules.inc
deleted file mode 100644
index e9d5b7c..0000000
--- a/commerce_price_table.rules.inc
+++ /dev/null
@@ -1,170 +0,0 @@
-<?php
-
-/**
- * Implements hook_rules_action_info().
- */
-function commerce_price_table_rules_action_info() {
-  $actions = array();
-
-  $actions['commerce_price_table_set_price'] = array(
-    'label' => t('Set the unit price to a table based price'),
-    'parameter' => array(
-      'commerce_line_item' => array(
-        'type' => 'commerce_line_item',
-        'label' => t('Line item'),
-      ),
-      'quantity' => array(
-        'label' => t('Quantity'),
-        'type' => 'decimal',
-      ),
-      'price_table' => array(
-        'label' => t('Price table'),
-        'type' => 'list<commerce_price_table>',
-      ),
-      'component_name' => array(
-        'type' => 'text',
-        'label' => t('Price component type'),
-        'description' => t('Price components track changes to prices made during the price calculation process, and they are carried over from the unit price to the total price of a line item. When an order total is calculated, it combines all the components of every line item on the order. When the unit price is altered by this action, the selected type of price component will be added to its data array and reflected in the order total display when it is formatted with components showing. Defaults to base price, which displays as the order Subtotal.'),
-        'options list' => 'commerce_price_table_price_component_options_list',
-        'default value' => 'base_price',
-      ),
-    ),
-    'group' => t('Commerce Price Table'),
-  );
-
-  $actions['commerce_price_table_sum_quantities'] = array(
-    'label' => t('Sum quantities for products sharing a display'),
-    'parameter' => array(
-      'commerce_line_item' => array(
-        'type' => 'commerce_line_item',
-        'label' => t('Line item'),
-        'wrapped' => TRUE,
-      ),
-    ),
-    'provides' => array(
-      'combined_product_sum' => array(
-        'label' => t('Combined product sum'),
-        'type' => 'decimal',
-      ),
-    ),
-    'group' => t('Commerce Price Table'),
-  );
-
-  return $actions;
-}
-
-/**
- * Options list callback: price component selection list.
- */
-function commerce_price_table_price_component_options_list() {
-  return commerce_price_component_titles();
-}
-
-/**
- * Rules callback: executes the "Replace the price for a price table" action.
- */
-function commerce_price_table_set_price($line_item, $quantity, $price_table, $component_name) {
-  // If the line item contains a product...
-  if (in_array($line_item->type, commerce_product_line_item_types())) {
-    // Load its referenced product.
-    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
-    $product = $line_item_wrapper->commerce_product->value();
-
-    // Bail now if the unit price is unset.
-    $unit_price = commerce_price_wrapper_value($line_item_wrapper, 'commerce_unit_price');
-
-    if (empty($unit_price)) {
-      return;
-    }
-
-    // Fetch the table based price for the current product quantity.
-    $table_price = commerce_price_table_get_amount_qty($product, $quantity, $price_table);
-
-    // If we got a valid table price...
-    if (!empty($table_price)) {
-      // If the currency is different from the current currency, convert it.
-      if ($unit_price['currency_code'] != $table_price['currency_code']) {
-        $line_item_wrapper->commerce_unit_price->amount = commerce_currency_convert($unit_price['amount'], $unit_price['currency_code'], $table_price['currency_code']);
-        $line_item_wrapper->commerce_unit_price->currency_code = $table_price['currency_code'];
-
-        // Convert the currency code of the price's components.
-        if (!empty($unit_price['data']['components'])) {
-          foreach ($unit_price['data']['components'] as $key => &$component) {
-            $component['price']['amount'] = commerce_currency_convert($component['price']['amount'], $component['price']['currency_code'], $table_price['currency_code']);
-            $component['price']['currency_code'] = $table_price['currency_code'];
-          }
-
-          $wrapper->commerce_unit_price->data = $unit_price['data'];
-        }
-      }
-
-      // Calculate the difference between the current unit price amount and the
-      // table price and create a price array representing the difference.
-      $current_amount = $unit_price['amount'];
-      $updated_amount = $table_price['amount'];
-
-      $difference = array(
-        'amount' => $updated_amount - $current_amount,
-        'currency_code' => $table_price['currency_code'],
-        'data' => array(),
-      );
-
-      // Set the amount of the unit price and add the difference as a component.
-      $line_item_wrapper->commerce_unit_price->amount = $updated_amount;
-
-      $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
-        $line_item_wrapper->commerce_unit_price->value(),
-        $component_name,
-        $difference,
-        TRUE
-      );
-    }
-  }
-}
-
-/**
- * Rules callback: provides a combined product sum variable in a rule based on
- * all line items sharing the same product display as the given one.
- */
-function commerce_price_table_sum_quantities($line_item_wrapper) {
-  $sum = 0;
-
-  // If the line item does not have an ID, it is being used to calculate a price
-  // on a product display. Return its quantity.
-  if (empty($line_item_wrapper->value()->line_item_id)) {
-    return array('combined_product_sum' => $line_item_wrapper->quantity->value());
-  }
-
-  // Loop over all line items on the order...
-  foreach ($line_item_wrapper->order->commerce_line_items as $delta => $target_line_item_wrapper) {
-    // If the current target line item references the same product as the
-    // original one, include its quantity in the sum.
-    if ($line_item_wrapper->commerce_product->raw() == $target_line_item_wrapper->commerce_product->raw()) {
-      $sum += $target_line_item_wrapper->quantity->value();
-      continue;
-    }
-
-    // If the current target line item shares the same display context as the
-    // original one, include its quantity in the sum.
-    $source_data = $line_item_wrapper->value()->data;
-    $target_data = $target_line_item_wrapper->value()->data;
-
-    if (empty($source_data['context']) || empty($target_data['context'])) {
-      continue;
-    }
-
-    if ($source_data['context']['product_ids'] == $target_data['context']['product_ids']) {
-      // Include special checking for product IDs derived from reference fields.
-      if ($source_data['context']['product_ids'] == 'entity') {
-        if ($source_data['context']['entity'] == $target_data['context']['entity']) {
-          $sum += $target_line_item_wrapper->quantity->value();
-        }
-      }
-      else {
-        $sum += $target_line_item_wrapper->quantity->value();
-      }
-    }
-  }
-
-  return array('combined_product_sum' => $sum);
-}
diff --git a/commerce_price_table.rules_defaults.inc b/commerce_price_table.rules_defaults.inc
deleted file mode 100644
index 5813bcf..0000000
--- a/commerce_price_table.rules_defaults.inc
+++ /dev/null
@@ -1,43 +0,0 @@
-<?php
-
-/**
- * @file
- * Default rule configurations for Cart.
- */
-
-/**
- * Implements hook_default_rules_configuration().
- */
-function commerce_price_table_default_rules_configuration() {
-  $rules = array();
-
-  // Add a reaction rule to update a shopping cart order's status to "Shopping
-  // cart" when a product is added to or removed from the order.
-  $rule = rules_reaction_rule();
-
-  $rule->label = t('Override price with price table');
-  $rule->active = TRUE;
-
-  $rule
-    ->event('commerce_product_calculate_sell_price')
-    ->condition('entity_has_field', array(
-      'entity:select' => 'commerce-line-item',
-      'field' => 'commerce_product',
-    ))
-    ->condition('entity_has_field', array(
-      'entity:select' => 'commerce-line-item:commerce-product',
-      'field' => 'field_price_table',
-    ))
-    ->action('commerce_price_table_set_price', array(
-      'commerce_line_item:select' => 'commerce-line-item',
-      'quantity:select' => 'commerce-line-item:quantity',
-      'price_table:select' => 'commerce-line-item:commerce-product:field-price-table',
-      'component_name' => 'base_price',
-    ));
-
-  $rule->weight = -10;
-
-  $rules['commerce_price_table_override_price'] = $rule;
-
-  return $rules;
-}
diff --git a/commerce_price_table_ief/commerce_price_table_ief.info b/commerce_price_table_ief/commerce_price_table_ief.info
deleted file mode 100644
index 8574895..0000000
--- a/commerce_price_table_ief/commerce_price_table_ief.info
+++ /dev/null
@@ -1,11 +0,0 @@
-name = Commerce Price Table IEF support
-description = Provides support for Inline Entity Form
-package = Commerce (contrib)
-core = 7.x
-
-dependencies[] = commerce_product
-dependencies[] = commerce_price
-dependencies[] = commerce_price_table
-dependencies[] = inline_entity_form
-
-files[] = includes/commerce_price_table_ief_commerce_product.inline_entity_form.inc
diff --git a/commerce_price_table_ief/commerce_price_table_ief.install b/commerce_price_table_ief/commerce_price_table_ief.install
deleted file mode 100644
index c9a206d..0000000
--- a/commerce_price_table_ief/commerce_price_table_ief.install
+++ /dev/null
@@ -1,20 +0,0 @@
-<?php
-
-/**
- * Implements hook_install().
- * Ensures that the weight of this module is higher than the weight of
- * the inline_entity_form module.
- */
-function commerce_price_table_ief_install() {
-  $weight = db_select('system', 's')
-    ->fields('s', array('weight'))
-    ->condition('name', 'inline_entity_form', '=')
-    ->execute()
-    ->fetchField();
-
-  db_update('system')
-    ->fields(array('weight' => $weight + 1))
-    ->condition('name', 'commerce_price_table_ief', '=')
-    ->execute();
-}
-
diff --git a/commerce_price_table_ief/commerce_price_table_ief.module b/commerce_price_table_ief/commerce_price_table_ief.module
deleted file mode 100644
index f223dba..0000000
--- a/commerce_price_table_ief/commerce_price_table_ief.module
+++ /dev/null
@@ -1,66 +0,0 @@
-<?php
-
-/**
- * Implements hook_entity_info_alter().
- */
-function commerce_price_table_ief_entity_info_alter(&$entity_info) {
-  // We'll use our custom contoller.
-  if (isset($entity_info['commerce_product'])) {
-    $entity_info['commerce_product']['inline entity form'] = array(
-      'controller' => 'PriceTableCommerceProductInlineEntityFormController',
-    );
-
-    // We'll define a custom view mode for this entity.
-    $entity_info['commerce_product']['view modes']['inline_entity_form'] = array(
-      'label' => t('Inline Entity Form'),
-      'custom settings' => TRUE,
-    );
-  }
-}
-
-/**
- * Implements hook_field_formatter_info().
- */
-function commerce_price_table_ief_field_formatter_info() {
-  return array(
-    'commerce_multiprice_list_ief' => array(
-      'label' => t('Price list (for inline entity form)'),
-      'field types' => array('commerce_price_table'),
-      'settings' => array(
-        'calculation' => FALSE,
-      ),
-    ),
-  );
-}
-
-/**
- * Implements hook_field_formatter_view().
- */
-function commerce_price_table_ief_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
-  $element = array();
-
-  if ($display['type'] == 'commerce_multiprice_list_ief' && !empty($items)) {
-    uasort($items, 'commerce_price_table_sort_by_qty');
-    $list_items = array();
-    foreach ($items as $delta => $item) {
-      if (isset($item['min_qty']) && $item['amount']) {
-        $header = commerce_price_table_display_quantity_headers($item);
-        $price = commerce_currency_format($item['amount'], $item['currency_code'], $entity);
-        $list_items[] = "$price ($header)";
-      }
-    }
-    $element[] = array(
-      '#markup' => theme('item_list', array('items' => $list_items)),
-    );
-  }
-
-  return $element;
-}
-
-/**
- * Implements hook_inline_entity_form_entity_form_alter().
- */
-function commerce_price_table_ief_inline_entity_form_entity_form_alter(&$entity_form, $form_state) {
-  commerce_price_table_form_commerce_product_ui_product_form_alter($entity_form, $form_state, 'commerce_product_ui_product_form');
-}
-
diff --git a/commerce_price_table_ief/includes/commerce_price_table_ief_commerce_product.inline_entity_form.inc b/commerce_price_table_ief/includes/commerce_price_table_ief_commerce_product.inline_entity_form.inc
deleted file mode 100644
index 8781ddf..0000000
--- a/commerce_price_table_ief/includes/commerce_price_table_ief_commerce_product.inline_entity_form.inc
+++ /dev/null
@@ -1,38 +0,0 @@
-<?php
-
-/**
- * @file
- * Customized inline entity form controller, as suggested in the
- * IEF issue http://drupal.org/node/1521274.
- */
-
-class PriceTableCommerceProductInlineEntityFormController extends CommerceProductInlineEntityFormController {
-
-  public function defaultFields($bundles) {
-    $fields = parent::defaultFields($bundles);
-
-    $weight = 0;
-    if (isset($fields['commerce_price'])) {
-      $weight = isset($fields['commerce_price']['weight']) ? $fields['commerce_price']['weight'] + 1 : 1;
-      foreach ($bundles as $bundle) {
-        foreach (commerce_price_table_get_field_instance_settings('commerce_product', $bundle) as $setting) {
-          if (isset($setting['settings']['commerce_price_table']['hide_default_price']) && $setting['settings']['commerce_price_table']['hide_default_price']) {
-            $fields['commerce_price']['visible'] = FALSE;
-          }
-        }
-      }
-    }
-
-    // Add a column for the price table
-    $fields['field_price_table'] = array (
-      'type' => 'field',
-      'label' => 'Price Table',
-      'formatter' => 'commerce_multiprice_list_ief',
-      'settings' => array(),
-      'visible' => TRUE,
-      'weight' => $weight,
-    );
-
-    return $fields;
-  }
-}
diff --git a/tests/commerce_price_table.test b/tests/commerce_price_table.test
deleted file mode 100644
index 9c32801..0000000
--- a/tests/commerce_price_table.test
+++ /dev/null
@@ -1,284 +0,0 @@
-<?php
-
-/**
- * @file
- * Functional tests for the commerce price table module.
- */
-
-/**
- * Test price table features.
- */
-class CommercePriceTableTest extends CommerceBaseTestCase {
-  /**
-   * Product generated.
-   */
-  protected $product;
-
-  /**
-   * Product node.
-  */
-  protected $product_node;
-
-  /**
-   * Display node type.
-   */
-  protected $display_type;
-
-  /**
-   * Price table field name
-   */
-  protected $field_name;
-
-  /**
-   * Price table field info.
-   */
-  protected $field;
-
-  /**
-   * Price table field instance info.
-   */
-  protected $field_instance;
-
-  /**
-   * Implementation of getInfo().
-   */
-  public static function getInfo() {
-    return array(
-      'name' => 'Price table',
-      'description' => 'Test the price table field',
-      'group' => 'Drupal Commerce',
-    );
-  }
-
-  /**
-   * Implementation of setUp().
-   */
-  function setUp() {
-    $modules = parent::setUpHelper('all', array('commerce_price_table'));
-    parent::setUp($modules);
-
-    // Create a site admin + store admin user and login.
-    $this->site_admin = $this->createUserWithPermissionHelper(array('site admin', 'store admin'));
-    $this->drupalLogin($this->site_admin);
-
-    // Also create a store customer.
-    $this->store_customer = $this->createStoreCustomer();
-
-    // Create a dummy product display content type.
-    $this->createDummyProductDisplayContentType();
-
-    // Create dummy product display nodes (and their corresponding product
-    //  entities).
-    $sku = 'PROD-01';
-    $product_name = 'Product One';
-    $this->product = $this->createDummyProduct($sku, $product_name);
-    $this->product_node = $this->createDummyProductNode(array($this->product->product_id), $product_name);
-
-    // Access to the manage fields screen.
-    $this->drupalGet('admin/commerce/products/types/product/fields');
-
-    // Add a new price table field
-    $edit = array(
-      'fields[_add_new_field][label]' => 'Price table',
-      'fields[_add_new_field][field_name]' => 'field_price_table',
-      'fields[_add_new_field][type]' => 'commerce_price_table',
-      'fields[_add_new_field][widget_type]' => 'commerce_price_table_multiple',
-    );
-    $this->drupalPost(NULL, $edit, t('Save'));
-
-    // Save the field settings, which are empty.
-    $this->drupalPost(NULL, array(), t('Save field settings'));
-
-    // Set unlimited values.
-    $this->drupalPost(NULL, array('field[cardinality]' => '-1'), t('Save settings'));
-
-    // Clear field's cache.
-    field_cache_clear();
-
-    // Get the field information just saved.
-    $this->field_name = 'field_price_table';
-    $this->field = field_info_field($this->field_name);
-    $this->field_instance = field_info_instance('commerce_product', $this->field_name, 'product');
-  }
-
-  /**
-   * Test if the field is correctly created and attached to the product entity.
-   */
-  public function testCommercePriceTableCreateField() {
-    // Check at database level.
-    $this->assertTrue(in_array('product', $this->field['bundles']['commerce_product']), t('Field is present in the product bundle'));
-    $this->assertTrue($this->field_instance['field_name'] == $this->field_name, t('Field instance is present in the product bundle'));
-
-    // Access product fields admin and check if the price table field is there.
-    $this->drupalGet('admin/commerce/products/types/product/fields');
-    $this->assertText('Price table', t('Price table field label found in the product fields admin screen'));
-    $this->assertText($this->field_name, t('Price table field name found in the product fields admin screen'));
-
-    // Check if it's configured to unlimited.
-    $this->drupalGet('admin/commerce/products/types/product/fields/' . $this->field_name);
-    $this->assertOptionSelected('edit-field-cardinality', -1, t('Price table field is configured to have unlimited values'));
-
-    // When creating a product, verify that the field is there.
-    $this->drupalGet('admin/commerce/products/add/product');
-    $this->assertText('Price table', t('Price table field label found in the add product form.'));
-    $this->assertFieldByName($this->field_name . '[und][0][amount]', NULL, t('Price table amount is present'));
-    $this->assertFieldByName($this->field_name . '[und][0][min_qty]', NULL, t('Price table min quantity is present'));
-    $this->assertFieldByName($this->field_name . '[und][0][max_qty]', NULL, t('Price table max quantity is present'));
-    $this->assertFieldById('edit-field-price-table-und-add-more', t('Add another item'), t('\'Add another item\' button is present'));
-  }
-
-  /**
-   * Save a product with price table information.
-   */
-  public function testCommercePriceTableSaveProduct() {
-    // Access to a product edit.
-    $this->drupalGet('admin/commerce/products/' . $this->product->product_id . '/edit');
-    
-    // Add price table information and save.
-    $edit = array(
-      'field_price_table[und][0][amount]' => 100,
-      'field_price_table[und][0][min_qty]' => 1,
-      'field_price_table[und][0][max_qty]' => 10,
-    );
-    $this->drupalPostAJAX(NULL, $edit, 'field_price_table_add_more');
-
-    $edit = array(
-      'field_price_table[und][1][amount]' => 50,
-      'field_price_table[und][1][min_qty]' => 11,
-      'field_price_table[und][1][max_qty]' => 20,
-    );
-    $this->drupalPostAJAX(NULL, $edit, 'field_price_table_add_more');
-
-    $edit = array(
-      'field_price_table[und][2][amount]' => 10,
-      'field_price_table[und][2][min_qty]' => 21,
-      'field_price_table[und][2][max_qty]' => -1,
-    );
-    $this->drupalPostAJAX(NULL, $edit, 'field_price_table_add_more');
-
-    $this->drupalPost(NULL, array(), t('Save product'));
-
-    // Access the edit page again to see if the values have been saved.
-    $this->drupalGet('admin/commerce/products/1/edit');
-    $this->assertFieldByName($this->field_name . '[und][0][amount]', 100, t('First amount for price table is correct.'));
-    $this->assertFieldByName($this->field_name . '[und][0][min_qty]', 1, t('First min quantity for price table is correct.'));
-    $this->assertFieldByName($this->field_name . '[und][0][max_qty]', 10, t('First max quantity for price table is correct.'));
-    $this->assertFieldByName($this->field_name . '[und][1][amount]', 50, t('Second amount for price table is correct.'));
-    $this->assertFieldByName($this->field_name . '[und][1][min_qty]', 11, t('Second min quantity for price table is correct.'));
-    $this->assertFieldByName($this->field_name . '[und][1][max_qty]', 20, t('Second max quantity for price table is correct.'));
-    $this->assertFieldByName($this->field_name . '[und][2][amount]', 10, t('Third amount for price table is correct.'));
-    $this->assertFieldByName($this->field_name . '[und][2][min_qty]', 21, t('Third min quantity for price table is correct.'));
-    $this->assertFieldByName($this->field_name . '[und][2][max_qty]', -1, t('Third max quantity for price table is correct.'));
-    
-    // Load the product with id 1 and check the field values.
-    $product = commerce_product_load(1);
-    $field_items = field_get_items('commerce_product', $product, $this->field_name);
-    $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
-    $this->assertTrue($product_wrapper->{$this->field_name}->get(0)->amount->value() == 10000, t('First amount for price table is stored correctly.'));
-    $this->assertTrue($product_wrapper->{$this->field_name}->get(0)->min_qty->value() == 1, t('First min quantity for price table is stored correctly.'));
-    $this->assertTrue($product_wrapper->{$this->field_name}->get(0)->max_qty->value() == 10, t('First max quantity for price table is stored correctly.'));
-    $this->assertTrue($product_wrapper->{$this->field_name}->get(1)->amount->value() == 5000, t('Second amount for price table is stored correctly.'));
-    $this->assertTrue($product_wrapper->{$this->field_name}->get(1)->min_qty->value() == 11, t('Second min quantity for price table is stored correctly.'));
-    $this->assertTrue($product_wrapper->{$this->field_name}->get(1)->max_qty->value() == 20, t('Second max quantity for price table is stored correctly.'));
-    $this->assertTrue($product_wrapper->{$this->field_name}->get(2)->amount->value() == 1000, t('Third amount for price table is stored correctly.'));
-    $this->assertTrue($product_wrapper->{$this->field_name}->get(2)->min_qty->value() == 21, t('Third min quantity for price table is stored correctly.'));
-    $this->assertTrue($product_wrapper->{$this->field_name}->get(2)->max_qty->value() == -1, t('Third max quantity for price table is stored correctly.'));
-
-    // Login with customer
-    $this->drupalLogin($this->store_customer);
-
-    // Access to the product display page.
-    $this->drupalGet('node/' . $this->product_node->nid);
-    $this->assertResponse(200, t('Product node is accessible by store customer.'));
-
-    // Check if the price table is there and it's right.
-    $this->assertRaw(drupal_render(field_view_field('commerce_product', $product, $this->field_name)), t('Price table is displayed correctly in the product display'));
-  }
-
-  /**
-   * Test cart behaviors such as adding quantities.
-   */
-  public function testCommercePriceTableCart() {
-    // First add price table info to a product.
-    // Access to a product edit.
-    $this->drupalGet('admin/commerce/products/' . $this->product->product_id . '/edit');
-
-    // Add price table information and save.
-    $edit = array(
-      'field_price_table[und][0][amount]' => 100,
-      'field_price_table[und][0][min_qty]' => 1,
-      'field_price_table[und][0][max_qty]' => 10,
-    );
-    $this->drupalPostAJAX(NULL, $edit, 'field_price_table_add_more');
-
-    $edit = array(
-      'field_price_table[und][1][amount]' => 50,
-      'field_price_table[und][1][min_qty]' => 11,
-      'field_price_table[und][1][max_qty]' => 20,
-    );
-    $this->drupalPostAJAX(NULL, $edit, 'field_price_table_add_more');
-
-    $edit = array(
-      'field_price_table[und][2][amount]' => 10,
-      'field_price_table[und][2][min_qty]' => 21,
-      'field_price_table[und][2][max_qty]' => -1,
-    );
-    $this->drupalPostAJAX(NULL, $edit, 'field_price_table_add_more');
-
-    $this->drupalPost(NULL, array(), t('Save product'));
-
-    // Login with customer
-    $this->drupalLogin($this->store_customer);
-
-    // Access the product display page and add it to the cart.
-    $this->drupalPost('node/' . $this->product_node->nid, array(), t('Add to cart'));
-
-    // Access the cart and check if the price is right.
-    $this->drupalGet($this->getCommerceUrl('cart'));
-
-    // Modify the quantity several times and check the price.
-    $qty = $this->xpath("//input[starts-with(@name, 'edit_quantity')]");
-
-    $this->assertRaw(commerce_currency_format(10000, 'USD'), t('Price amount for 1 item is correct.'));
-    
-    $this->drupalPost($this->getCommerceUrl('cart'), array((string) $qty[0]['name'] => 11), t('Update cart'));
-    $this->assertFieldByXPath("//input[starts-with(@id, 'edit-edit-quantity')]", 11, t('Cart updated with new quantity: 11'));
-    $this->assertRaw(commerce_currency_format(5000 * 11, 'USD'), t('Price amount for 11 items is correct.'));
-
-    $this->drupalPost($this->getCommerceUrl('cart'), array((string) $qty[0]['name'] => 21), t('Update cart'));
-    $this->assertFieldByXPath("//input[starts-with(@id, 'edit-edit-quantity')]", 21, t('Cart updated with new quantity: 21'));
-    $this->assertRaw(commerce_currency_format(1000 * 21, 'USD'), t('Price amount for 21 items is correct.'));
-  }
-
-  /**
-   * Hide the original price.
-   */
-  public function testCommercePriceTableHideOriginalPrice() {
-
-    $this->drupalGet('admin/commerce/products/' . $this->product->product_id . '/edit');
-    $this->drupalGet('node/' . $this->product_node->nid);
-
-    // Access the field admin page to check if the hide option is there.
-    $this->drupalGet('admin/commerce/products/types/product/fields/' . $this->field_name);
-    $this->assertFieldByName('instance[settings][commerce_price_table][hide_default_price]', NULL, t('Hide option for original price is present in the field admin page.'));
-
-    // Enable hide original price.
-    $edit = array(
-      'instance[settings][commerce_price_table][hide_default_price]' => 1,
-    );
-    $this->drupalPost(NULL, $edit, t('Save settings'));
-
-    // Check if the checkbox is selected.
-    $this->drupalGet('admin/commerce/products/types/product/fields/' . $this->field_name);
-    $this->assertFieldByName('instance[settings][commerce_price_table][hide_default_price]', 1, t('Hide option for original price is selected.'));
-
-    // Access product edit, price textfield should be hidden.
-    $this->drupalGet('admin/commerce/products/' . $this->product->product_id . '/edit');
-    $price_field = $this->xpath("//input[@id='edit-commerce-price-und-0-amount']");
-    $this->assertTrue(empty($price_field), t('Original price field is hidden in the product edit page.'));
-
-    // Access product display, original price shouldn't be there.
-    $this->drupalGet('node/' . $this->product_node->nid);
-    $this->assertNoRaw(drupal_render(field_view_field('commerce_product', $this->product, 'commerce_price')), t('Original price is not displayed in the product display'));
-  }
-}
diff --git a/theme/commerce_price_table.css b/theme/commerce_price_table.css
deleted file mode 100644
index 20a552f..0000000
--- a/theme/commerce_price_table.css
+++ /dev/null
@@ -1,4 +0,0 @@
-.field-type-commerce-price-table table div.form-item {
-  float: left;
-  margin-right: 1em;
-}
